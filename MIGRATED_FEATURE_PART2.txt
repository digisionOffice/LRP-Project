# ATTENDANCE SYSTEM - JAVASCRIPT AND FRONTEND FILES

// FILE: public/js/absensi-geolocation.js
// Absensi Geolocation JavaScript
document.addEventListener('DOMContentLoaded', function() {
    // For karyawan panel, only enable geolocation validation, disable form blocking
    const isKaryawanPanel = window.location.href.includes('/karyawan/');
    if (isKaryawanPanel) {
        console.log("üîß Karyawan panel: enabling geolocation validation only");
        // Skip the aggressive form blocking for karyawan panel
        window.skipFormBlocking = true;
    }

    console.log('üöÄ Absensi Geolocation script loaded');

    const demo = document.getElementById("location-demo");

    // Initialize geolocation functions
    window.getLocation = function() {
        if (navigator.geolocation) {
            demo.innerHTML = "üîç Mengambil lokasi Anda...<br><small>Pastikan GPS aktif dan izinkan akses lokasi</small>";
            demo.className = "p-3 bg-yellow-50 border border-yellow-200 rounded-lg text-yellow-800 mb-3";

            const options = {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 300000
            };

            navigator.geolocation.getCurrentPosition(success, error, options);
        } else {
            demo.innerHTML = "‚ùå Geolocation tidak didukung browser ini.<br>Silakan gunakan tombol Jakarta.";
            demo.className = "p-3 bg-red-50 border border-red-200 rounded-lg text-red-800 mb-3";
        }
    };

    function success(position) {
        const lat = position.coords.latitude.toFixed(6);
        const lng = position.coords.longitude.toFixed(6);
        const accuracy = Math.round(position.coords.accuracy);

        demo.innerHTML = "‚úÖ Lokasi berhasil dideteksi!<br>" +
            "Latitude: " + lat + "<br>" +
            "Longitude: " + lng + "<br>" +
            "Akurasi: ¬±" + accuracy + " meter<br>" +
            "<small>üîç Memvalidasi lokasi...</small>";
        demo.className = "p-3 bg-green-50 border border-green-200 rounded-lg text-green-800 mb-3";

        // Store coordinates globally
        window.currentCoordinates = {
            latitude: lat,
            longitude: lng,
            isValid: true
        };

        setCoordinates(lat, lng);
        validateLocationDistance(lat, lng);
        hideManualInput();
        console.log("üéâ Geolocation success:", { lat: lat, lng: lng, accuracy: accuracy });
    }

    function error(err) {
        let message = "‚ùå Gagal mendapatkan lokasi. ";

        if (err) {
            switch(err.code) {
                case err.PERMISSION_DENIED:
                    message += "Izin akses lokasi ditolak.<br>Silakan aktifkan izin lokasi di browser atau gunakan tombol Jakarta.";
                    break;
                case err.POSITION_UNAVAILABLE:
                    message += "Lokasi tidak tersedia.<br>Pastikan GPS aktif atau gunakan tombol Jakarta.";
                    break;
                case err.TIMEOUT:
                    message += "Waktu permintaan habis.<br>Silakan coba lagi atau gunakan tombol Jakarta.";
                    break;
                default:
                    message += "Terjadi kesalahan.<br>Silakan gunakan tombol Jakarta.";
                    break;
            }
        } else {
            message += "Silakan gunakan tombol Jakarta.";
        }

        demo.innerHTML = message;
        demo.className = "p-3 bg-red-50 border border-red-200 rounded-lg text-red-800 mb-3";
        console.log("‚ùå Geolocation error:", err);
    }

    window.useJakarta = function() {
        const lat = -6.200000;
        const lng = 106.816666;

        demo.innerHTML = "‚úÖ Menggunakan koordinat Jakarta<br>Latitude: " + lat + "<br>Longitude: " + lng + "<br><small>üîç Memvalidasi lokasi...</small>";
        demo.className = "p-3 bg-green-50 border border-green-200 rounded-lg text-green-800 mb-3";

        // Store coordinates globally
        window.currentCoordinates = {
            latitude: lat,
            longitude: lng,
            isValid: true
        };

        setCoordinates(lat, lng);
        validateLocationDistance(lat, lng);
        hideManualInput();
    };

    window.showManualInput = function() {
        document.getElementById("manual-input-container").style.display = "block";
        document.getElementById("manual-lat").focus();
    };

    window.hideManualInput = function() {
        document.getElementById("manual-input-container").style.display = "none";
        document.getElementById("manual-lat").value = "";
        document.getElementById("manual-lng").value = "";
    };

    window.useManualCoords = function() {
        const lat = parseFloat(document.getElementById("manual-lat").value);
        const lng = parseFloat(document.getElementById("manual-lng").value);

        if (isNaN(lat) || isNaN(lng)) {
            Swal.fire({
                icon: "error",
                title: "Input Tidak Valid! ‚ùå",
                text: "Silakan masukkan koordinat yang valid (angka)",
                confirmButtonText: "OK",
                confirmButtonColor: "#EF4444"
            });
            return;
        }

        if (lat < -90 || lat > 90) {
            Swal.fire({
                icon: "error",
                title: "Latitude Tidak Valid! ‚ùå",
                text: "Latitude harus antara -90 dan 90",
                confirmButtonText: "OK",
                confirmButtonColor: "#EF4444"
            });
            return;
        }

        if (lng < -180 || lng > 180) {
            Swal.fire({
                icon: "error",
                title: "Longitude Tidak Valid! ‚ùå",
                text: "Longitude harus antara -180 dan 180",
                confirmButtonText: "OK",
                confirmButtonColor: "#EF4444"
            });
            return;
        }

        demo.innerHTML = "‚úÖ Menggunakan koordinat manual<br>Latitude: " + lat + "<br>Longitude: " + lng + "<br><small>üîç Memvalidasi lokasi...</small>";
        demo.className = "p-3 bg-green-50 border border-green-200 rounded-lg text-green-800 mb-3";

        // Store coordinates globally
        window.currentCoordinates = {
            latitude: lat,
            longitude: lng,
            isValid: true
        };

        setCoordinates(lat, lng);
        validateLocationDistance(lat, lng);
        hideManualInput();
    };

    function setCoordinates(lat, lng) {
        console.log("üîç Setting coordinates:", { lat, lng });

        // Try multiple approaches to find and set the inputs
        const approaches = [
            // Approach 1: Direct name attribute
            () => {
                const latInput = document.querySelector("input[name=latitude]");
                const lngInput = document.querySelector("input[name=longitude]");
                return { latInput, lngInput, method: "name attribute" };
            },
            // Approach 2: Wire model (fixed selector)
            () => {
                const allInputs = document.querySelectorAll("input");
                let latInput = null, lngInput = null;

                allInputs.forEach(input => {
                    const wireModel = input.getAttribute("wire:model");
                    if (wireModel && wireModel.includes("latitude")) latInput = input;
                    if (wireModel && wireModel.includes("longitude")) lngInput = input;
                });

                return { latInput, lngInput, method: "wire:model search" };
            },
            // Approach 3: ID contains
            () => {
                const latInput = document.querySelector("input[id*=latitude]");
                const lngInput = document.querySelector("input[id*=longitude]");
                return { latInput, lngInput, method: "id contains" };
            },
            // Approach 4: Look for any input with latitude/longitude in various attributes
            () => {
                const allInputs = document.querySelectorAll("input");
                let latInput = null, lngInput = null;

                allInputs.forEach(input => {
                    const attrs = [input.name, input.id, input.getAttribute("wire:model"), input.getAttribute("x-model")].join(" ").toLowerCase();
                    if (attrs.includes("latitude") && !latInput) latInput = input;
                    if (attrs.includes("longitude") && !lngInput) lngInput = input;
                });

                return { latInput, lngInput, method: "attribute search" };
            }
        ];

        let latInput = null, lngInput = null, successMethod = null;

        // Try each approach until we find the inputs
        for (const approach of approaches) {
            const result = approach();
            if (result.latInput && result.lngInput) {
                latInput = result.latInput;
                lngInput = result.lngInput;
                successMethod = result.method;
                console.log("‚úÖ Found inputs using:", successMethod);
                break;
            }
        }

        if (latInput && lngInput) {
            // Set values
            latInput.value = lat;
            lngInput.value = lng;

            // Trigger multiple events for maximum compatibility
            const events = ["input", "change", "blur", "keyup"];
            events.forEach(eventType => {
                latInput.dispatchEvent(new Event(eventType, { bubbles: true }));
                lngInput.dispatchEvent(new Event(eventType, { bubbles: true }));
            });

            // Try Alpine.js if available
            if (window.Alpine) {
                try {
                    latInput.dispatchEvent(new CustomEvent("input", { bubbles: true }));
                    lngInput.dispatchEvent(new CustomEvent("input", { bubbles: true }));
                } catch (e) {
                    console.log("Alpine events failed:", e);
                }
            }

            console.log("üìç Coordinates set successfully:", { lat, lng, method: successMethod });
            console.log("üìç Final values:", {
                latValue: latInput.value,
                lngValue: lngInput.value
            });

            // Store coordinates globally for validation
            window.currentCoordinates = {
                latitude: lat,
                longitude: lng,
                isValid: true
            };

            return true;
        } else {
            console.error("‚ùå Could not find latitude/longitude inputs");
            debugAbsensiLocation();
            return false;
        }
    }

    // Validate location distance against workplace
    function validateLocationDistance(lat, lng) {
        console.log("üîç Validating location distance...");

        // Make AJAX request to validate geofencing
        fetch("/karyawan/validate-geofencing", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": document.querySelector("meta[name=csrf-token]")?.getAttribute("content") || ""
            },
            body: JSON.stringify({
                latitude: lat,
                longitude: lng
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log("üìç Geofencing validation result:", data);

            const demo = document.getElementById("location-demo");
            if (!demo) return;

            if (data.allowed) {
                demo.innerHTML = "‚úÖ Lokasi valid untuk absensi!<br>" +
                    "Latitude: " + lat + "<br>" +
                    "Longitude: " + lng + "<br>" +
                    "Jarak dari kantor: " + Math.round(data.distance || 0) + "m<br>" +
                    "<small class=\"text-green-600\">‚úì Dalam radius " + (data.radius || 0) + "m yang diperbolehkan</small>";
                demo.className = "p-3 bg-green-50 border border-green-200 rounded-lg text-green-800 mb-3";

                // Store validation result for form submission
                window.lastLocationValidation = {
                    allowed: true,
                    distance: Math.round(data.distance || 0),
                    radius: data.radius || 0,
                    entitas: data.entitas_name || "Lokasi Kerja"
                };
            } else {
                demo.innerHTML = "‚ùå Lokasi tidak valid untuk absensi!<br>" +
                    "Latitude: " + lat + "<br>" +
                    "Longitude: " + lng + "<br>" +
                    "Jarak dari kantor: " + Math.round(data.distance || 0) + "m<br>" +
                    "<small class=\"text-red-600\">‚úó Melebihi radius " + (data.radius || 0) + "m yang diperbolehkan</small><br>" +
                    "<strong>Pesan:</strong> " + (data.message || "Lokasi tidak valid");
                demo.className = "p-3 bg-red-50 border border-red-200 rounded-lg text-red-800 mb-3";

                // Store validation result for form submission
                window.lastLocationValidation = {
                    allowed: false,
                    distance: Math.round(data.distance || 0),
                    radius: data.radius || 0,
                    entitas: data.entitas_name || "Lokasi Kerja",
                    message: data.message || "Anda berada di luar radius yang diperbolehkan untuk melakukan absensi."
                };
            }
        })
        .catch(error => {
            console.error("‚ùå Error validating geofencing:", error);
            const demo = document.getElementById("location-demo");
            if (demo) {
                demo.innerHTML = "‚ö†Ô∏è Tidak dapat memvalidasi lokasi<br>" +
                    "Latitude: " + lat + "<br>" +
                    "Longitude: " + lng + "<br>" +
                    "<small>Silakan coba lagi atau hubungi administrator</small>";
                demo.className = "p-3 bg-yellow-50 border border-yellow-200 rounded-lg text-yellow-800 mb-3";
            }
        });
    }

    // Auto-start geolocation when page loads
    setTimeout(function() {
        console.log("üöÄ Auto-starting geolocation...");
        if (window.getLocation) {
            getLocation();
        }
    }, 1000);

    // Store coordinates globally for validation
    window.currentCoordinates = {
        latitude: null,
        longitude: null,
        isValid: false
    };
});

// FILE: public/js/camera-metadata.js
/**
 * Enhanced Camera Upload with Metadata for Attendance
 * Captures photo with geolocation and timestamp metadata
 */

// Prevent infinite loops and multiple loads
if (window.cameraMetadataLoaded) {
    console.log("üì∏ Camera metadata script already loaded, skipping...");
} else {
    window.cameraMetadataLoaded = true;

    document.addEventListener("DOMContentLoaded", function() {
        // Initialize camera interface after DOM is ready
        setTimeout(function() {
            if (isAttendancePage()) {
                initializeCameraInterface();
            }
        }, 1000);
    });
}

function isAttendancePage() {
    return window.location.href.includes('/karyawan/absensis/create') ||
           window.location.href.includes('/karyawan/attendance/create') ||
           document.getElementById('camera-interface-container') !== null;
}

function initializeCameraInterface() {
    console.log("üöÄ Initializing camera interface...");

    // Check if elements exist
    const requiredElements = [
        "camera-interface-container",
        "start-camera-btn",
        "capture-photo-btn",
        "stop-camera-btn",
        "camera-container",
        "camera-video",
        "preview-container",
        "photo-preview",
        "use-photo-btn",
        "retake-photo-btn"
    ];

    let missingElements = [];
    requiredElements.forEach(id => {
        if (!document.getElementById(id)) {
            missingElements.push(id);
        }
    });

    if (missingElements.length > 0) {
        console.error("‚ùå Missing elements:", missingElements);
        return;
    }

    console.log("‚úÖ All camera elements found");

    let stream = null;
    let currentLocation = null;
    let capturedImageData = null;
    let metadata = {};

    // Get current location
    getCurrentLocation();

    // Start live clock
    startLiveClock();

    // Event listeners
    document.getElementById("start-camera-btn").addEventListener("click", startCamera);
    document.getElementById("capture-photo-btn").addEventListener("click", capturePhoto);
    document.getElementById("stop-camera-btn").addEventListener("click", stopCamera);
    document.getElementById("use-photo-btn").addEventListener("click", usePhoto);
    document.getElementById("retake-photo-btn").addEventListener("click", retakePhoto);

    console.log("‚úÖ Camera interface initialized successfully");

    function getCurrentLocation() {
        console.log("üîç Requesting GPS location...");

        if (!navigator.geolocation) {
            console.error("‚ùå Geolocation not supported by this browser");
            updateCameraStatus("GPS tidak didukung oleh browser ini", "warning");
            return;
        }

        // Show loading status
        updateCameraStatus("üìç Mencari lokasi GPS...", "info");

        navigator.geolocation.getCurrentPosition(
            function(position) {
                currentLocation = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    accuracy: position.coords.accuracy,
                    timestamp: position.timestamp
                };
                console.log("‚úÖ GPS Location obtained:", currentLocation);
                updateCameraStatus(`üìç GPS ditemukan! Akurasi: ${Math.round(currentLocation.accuracy)}m`, "success");

                // Update live coordinates immediately
                updateLiveCoordinates();
            },
            function(error) {
                console.error("‚ùå Failed to get location:", error);
                let errorMessage = "Gagal mendapatkan lokasi GPS: ";

                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage += "Izin lokasi ditolak";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage += "Lokasi tidak tersedia";
                        break;
                    case error.TIMEOUT:
                        errorMessage += "Timeout mencari lokasi";
                        break;
                    default:
                        errorMessage += "Error tidak diketahui";
                        break;
                }

                console.warn(errorMessage);
                updateCameraStatus(errorMessage + ". Foto tetap bisa diambil tanpa GPS.", "warning");
            },
            {
                enableHighAccuracy: true,
                timeout: 20000, // Increased timeout
                maximumAge: 60000 // Reduced max age for fresher location
            }
        );

        // Also try to watch position for continuous updates
        if (navigator.geolocation.watchPosition) {
            navigator.geolocation.watchPosition(
                function(position) {
                    if (!currentLocation ||
                        Math.abs(currentLocation.latitude - position.coords.latitude) > 0.0001 ||
                        Math.abs(currentLocation.longitude - position.coords.longitude) > 0.0001) {

                        currentLocation = {
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude,
                            accuracy: position.coords.accuracy,
                            timestamp: position.timestamp
                        };
                        console.log("üîÑ GPS Location updated:", currentLocation);
                        updateLiveCoordinates();
                    }
                },
                function(error) {
                    console.warn("GPS watch error:", error);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 30000
                }
            );
        }
    }

    function updateLiveCoordinates() {
        const coordsElement = document.getElementById("live-coordinates");
        if (coordsElement && currentLocation) {
            coordsElement.textContent = `üìç ${currentLocation.latitude.toFixed(6)}, ${currentLocation.longitude.toFixed(6)} (¬±${Math.round(currentLocation.accuracy)}m)`;
            coordsElement.style.color = currentLocation.accuracy < 50 ? '#00FF88' : '#FFAA00';
        }
    }

    function startLiveClock() {
        setInterval(function() {
            const now = new Date();
            const timeElement = document.getElementById("current-time");
            if (timeElement) {
                // Format time in Indonesia timezone
                const indonesiaTimeDisplay = now.toLocaleString("id-ID", {
                    timeZone: "Asia/Jakarta",
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                }) + ' WIB';
                timeElement.textContent = indonesiaTimeDisplay;
            }

            // Update live coordinates using the new function
            updateLiveCoordinates();
        }, 1000);
    }
}
